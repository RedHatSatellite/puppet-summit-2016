<%#
name: Switch Community Puppet to Satellite 6 Puppet
job_category: Miscellaneous
description_format: Switch machine over to Satellite Puppet
snippet: false
template_inputs:
- name: disablerepos
  required: true
  input_type: user
  description: Comma separated list of repositories that need to be disabled. This
    usually means the repositories Puppet was installed from. Full repository names
    are required as you would pass them to subscription-manager repos --disable ${repo}.
  advanced: false
- name: sattoolsrepo
  required: true
  input_type: user
  description: Repository containing the Satellite 6 Tools. This repository will be
    enabled during the script and needs to be available in the systems current content
    view.
  advanced: false
- name: backupfile
  required: false
  input_type: user
  description: "A full path to a file to backup the current Puppet configuration to.
    Defaults to /root/puppet_cfg_backup_$(date +%s).tar.gz.\r\n\r\nPackages are not
    backed up."
  advanced: true
provider_type: SSH
kind: job_template
%>

# Switch from Puppet Community 3.8 to the version that is supplied by Red Hat
# Satellite 6 in the Satellite Tools repo.
# 
# - Backup the existing installation
# - Remove the existing installation
# - Disable the Puppet Community repository
# - Enable, if required, the Satellite Tools repository
# - Install new Puppet software
# - Configure the new Puppet software
# - Run once to request certificate

set -e

# Configuration: most should be fairly clear. DISABLEREPOS needs special care.
# It should be an array!
BACKUPFILE="<%= input("backupfile") %>"
SATTOOLSREPO="<%= input("sattoolsrepo") %>"
DISABLEREPOS="<%= input("disablerepos") %>"
NEWMASTER="<%= @host.puppetmaster %>"

echo "=> Backing up existing Puppet Community installation..."
echo "   Backupfile: ${BACKUPFILE:=/root/puppet_cfg_backup_$(date +%s).tar.gz"
tar cvzf ${BACKUPFILE} /var/lib/puppet /etc/puppet > /dev/null 2>&1
rc=$?
if [ ${rc} -ne 0 ]; then
    echo
    echo "  ERROR: Backup encountered a problem."
    exit 1
fi
echo
echo "   OK: Backup file is placed at ${BACKUPFILE}."
echo

echo "=> Removing existing Puppet Community 3.8 packages..."
yum -y remove puppet facter hiera ruby-shadow > /dev/null 2>&1
rm -rf /etc/puppet /var/lib/puppet
rc=$?
if [ ${rc} -ne 0 ]; then
    echo
    echo "  ERROR: Puppet packages could not be removed."
    exit 1
fi
echo
echo "   OK: Backup successful."
echo "   OK: File that were installed as dependencies have not been touched."
echo

echo "=> Enabling Satellite Tools repository..."
subscription-manager repos --enable ${SATTOOLSREPO} > /dev/null 2>&1
rc=$?
if [ ${rc} -ne 0 ]; then
    echo
    echo "  ERROR: ${SATTOOLSREPO} could not be enabled."
    exit 1
fi
echo
echo "  OK: ${SATTOOLSREPO} has been enabled"
echo

echo "=> Disabling Community Puppet repositories..."
for repo in "${COMMUNITYREPO[@]}"; do
subscription-manager repos --disable ${repo} > /dev/null 2>&1
done
rc=$?
if [ ${rc} -ne 0 ]; then
    echo
    echo "  ERROR: Community Puppet repositories could not be disabled."
    exit 1
fi
echo
echo "  OK: ${COMMUNITYREPO} has been disabled."
echo

echo "=> Installing new Puppet software as supplied by Satellite 6..."
yum -y install puppet
rc=$?
if [ ${rc} -ne 0 ]; then
    echo
    echo "  ERROR: Puppet could not be installed."
    exit 1
fi
echo
echo "  OK: Puppet has been installed."
echo

echo "=> Configuring new Puppet software..."
cat > /etc/puppet/puppet.conf << EOF
[main]
vardir = /var/lib/puppet
logdir = /var/log/puppet
rundir = /var/run/puppet
ssldir = \$vardir/ssl

[agent]
pluginsync      = true
environment     = production
server          = ${NEWMASTER}
EOF

if [ ${rc} -ne 0 ]; then
    echo
    echo "  ERROR: Puppet could not be configured"
    exit 1
fi
echo
echo "  OK: Puppet has been configured"
echo

echo "=> It should now be OK to start the Puppet agent on this server."
echo "   Make sure you sign the certificate on your master, too."